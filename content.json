[{"title":"react初探（1）","date":"2017-02-18T08:30:33.000Z","path":"2017/02/18/react初探（1）/","text":"从去年开始，团队开始使用react全家桶开发一系列的PC端后台系统，遇到了许多坑，有的已经爬出来了，有的正在填接下来我讲写一些关于react的文章与大家分享。欢迎大家留言交流。 react简介React是Facebook开发的一款JS库，区别于MVC框架，他更注重view层，更容易编写可重复使用的组件（这也是我们选择他的一个重要原因） react全家桶React在实际项目开发中有一整套的流程和工具，而要实现整个的流程的就是react全家桶。下面我将介绍我使用的react全家桶。react全家桶：基本内容： React JSX(Javascript和XML结合的一种格式) npm JavaScript 打包工具（webpack） ES6(babel转译) 路由（react-router） Flux（Flux库——Redux）其他的一些插件推荐 md5 antUI(一个非常好用的UI组件库) : https://ant.design/docs/react/introduce-cn 这套技术栈最主要的一个核心思想就是单项数据流，真正实现了以数据为核心。说道单向数据流就要祭出这张图&lt;Dispatcher是一个全局的分发器负责接收Action，而Store可以在Dispatcher上监听到Action并做出相应的操作。简单的理解可以认为类似于全局的消息发布订阅模型。Action可以来自于用户的某个界面操作，比如点击提交按钮；也可以来自服务器端的某个数据更新。当数据模型发生变化时，就触发刷新整个界面单向数据流的优点： 集中管理状态，所有的页面状态集中管理，通过不同的状态管理页面UI 让数据模型模型变得简单，所有数据都看作是只读的，要改变数据必须触发action动作触发一整个流程，改变相应的store，从而改变改变数据，更新UI。 维护简单，维护时只需要增增相应的状态，或者维护原有的的状态即可。传统开发方式的维护，牵一发而动全身，改了一处不知道会不会触发其他逻辑代码，一旦发生牵连，则要花费很大的精力解决带来的连锁bug 开发可复用组件变得简单。组件就是状态机器当组件处于某个状态时，那么就输出这个状态对应的界面。状态改变时React负责以最高效的方式去比较两个界面并更新DOM树，从而更新组件UI 使用心得 使用React技术栈，使我能更加专注于业务的开发，开发思路也更加清晰。 目前遇到的问题就是接口安全问题，传统开发方式，有后台PHP后Java嵌套界面，由服务器直接输出已经生成好的页面，接口安全也在后台直接做好，然而这套技术栈只需要后台提供接口其他的全部由前端操控，带来方便 的同时，也需要前端做相应的接口安全方面，目前的解决方案就是，后台通过接口传给前台一个token,前台请求接口时带入token值进行请求，但是这样token传给了前台页面很容易被劫持。所以下一步的解决方案是前端自己构建一个nodejs后台，从而在Nodejs上进行安全验证，Nodejs搭建出来后前端能做的东西也将更多，甚至可以抛弃PHP和Java，自己独立开发一个系统，这也将是我的全栈发展路线","tags":[{"name":"react","slug":"react","permalink":"http://liyuanqing.top/tags/react/"}]},{"title":"解决iOS与pad里ifram无法滑动问题","date":"2017-02-17T09:28:34.000Z","path":"2017/02/17/解决iOS与pad里ifram无法滑动问题/","text":"今天遇到一个问题，在手机内嵌ifram，在iOS和pad里只会显示第一屏的内容，下面的内容加载出来了但是全部在下面，无法滑动展示，所以特意找了一下方法（经测可用） 在iframe的父容器添加如下css样式：12-webkit-overflow-scrolling:touch;overflow:auto; 对于安卓低于4.0版本的浏览器不支持overflow的问题，可使用如下js解决（对uc无效）:12345678910111213function touchScroll(id) &#123; var el = document.getElementByIdx_x(id); var scrollStartPos = 0; document.getElementByIdx_x(id).addEventListener(\"touchstart\", function (event) &#123; scrollStartPos = this.scrollTop + event.touches[0].pageY; event.preventDefault(); &#125;, false); document.getElementByIdx_x(id).addEventListener(\"touchmove\", function (event) &#123; this.scrollTop = scrollStartPos - event.touches[0].pageY; event.preventDefault(); &#125;, false); &#125;","tags":[{"name":"ifram","slug":"ifram","permalink":"http://liyuanqing.top/tags/ifram/"},{"name":"ios","slug":"ios","permalink":"http://liyuanqing.top/tags/ios/"},{"name":"pad","slug":"pad","permalink":"http://liyuanqing.top/tags/pad/"}]},{"title":"js实现jq的ajax","date":"2017-02-13T10:22:43.000Z","path":"2017/02/13/js实现jq的ajax/","text":"本文将介绍如何使用js封装一段代码，实现jq的ajax功能，每一步代码均有注释便于理解 实现代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556function ajax()&#123; //获取ajax的相应值（请求类型，请求地址，同步或异步，传递数据，接收数据类型，成功失败函数等） var ajaxData = &#123; type:arguments[0].type || \"GET\", url:arguments[0].url || \"\", async:arguments[0].async || \"true\", data:arguments[0].data || null, dataType:arguments[0].dataType || \"text\", contentType:arguments[0].contentType || \"application/x-www-form-urlencoded\", beforeSend:arguments[0].beforeSend || function()&#123;&#125;, success:arguments[0].success || function()&#123;&#125;, error:arguments[0].error || function()&#123;&#125; &#125; ajaxData.beforeSend() var xhr = createxmlHttpRequest(); //创建 XMLHttpRequest 对象 xhr.responseType=ajaxData.dataType; //预期服务器返回的数据类型 xhr.open(ajaxData.type,ajaxData.url,ajaxData.async); //规定请求的类型、URL 以及是否异步处理请求 xhr.setRequestHeader(\"Content-Type\",ajaxData.contentType); //发送信息至服务器时内容编码类型(向请求添加 HTTP 头) xhr.send(convertData(ajaxData.data)); //将请求发送到服务器 //当请求被发送到服务器时，我们需要执行一些基于响应的任务。 //每当 readyState 改变时，就会触发 onreadystatechange 事件。 //readyState 属性存有 XMLHttpRequest 的状态信息。 xhr.onreadystatechange = function() &#123; if (xhr.readyState == 4) &#123; if(xhr.status == 200)&#123; ajaxData.success(xhr.response) &#125;else&#123; ajaxData.error() &#125; &#125; &#125;&#125;//创建 XMLHttpRequest 对象function createxmlHttpRequest() &#123; if (window.ActiveXObject) &#123; // IE6, IE5 浏览器执行代码 return new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; else if (window.XMLHttpRequest) &#123; // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码 return new XMLHttpRequest(); &#125;&#125;//解析传入的对象function convertData(data)&#123; if( typeof data === 'object' )&#123; var convertResult = \"\" ; for(var c in data)&#123; convertResult+= c + \"=\" + data[c] + \"&amp;\"; &#125; convertResult=convertResult.substring(0,convertResult.length-1) return convertResult; &#125;else&#123; return data; &#125;&#125; 调用方法ajax({ type:\"POST\", url:\"ajax.php\", dataType:\"json\", data:{\"val1\":\"abc\",\"val2\":123,\"val3\":\"456\"}, beforeSend:function(){ //some js code }, success:function(msg){ console.log(msg) }, error:function(){ console.log(\"error\") } })","tags":[{"name":"js","slug":"js","permalink":"http://liyuanqing.top/tags/js/"},{"name":"jq","slug":"jq","permalink":"http://liyuanqing.top/tags/jq/"},{"name":"ajax","slug":"ajax","permalink":"http://liyuanqing.top/tags/ajax/"}]},{"title":"基于github与hexo搭建自己的博客","date":"2017-02-10T09:58:05.000Z","path":"2017/02/10/基于github与hexo搭建自己的博客/","text":"本文将介绍如何基于github与hexo模板搭建一个属于自己的博客，博客的样式可以参看 李元庆的博客 博客的具体代码可以查看我的github仓库（持续更新中），同时欢迎各位留言提问与给出建议 为何选择github与hexo github为我们提供了免费的域名与仓库，相比较博客园与新浪微博等博客，虽然他们开通相对容易，但是限制较多，github Pages可以定制自己的博客内容功能能，一切有自己操控。 Github Pages优点： 轻量级的博客系统，没有麻烦的配置 使用标记语言，比如Markdown 无需自己搭建服务器 根据Github的限制，对应的每个站有300MB空间 可以绑定自己的域名Github Pages缺点： 不能关联数据库，所有的东西都是静态的 具有大小限制（似乎是2G）,不过用于搭建自己的博客或者是小站完全是够的一开始我选择的是官方推荐的Jekyll，但是Jekyll需要的环境太多，较复杂，所以后来我选择的比较简单的hexo接下来我将介绍如何搭建博客并绑定自己的域名 注册github账号和自己的仓库 前往github注册登录账号，与一般的网站注册账号的流程差不多，但是github是国外网站，在国内访问速度会有点慢注册好了之后登录&lt; 建立自己的仓库&lt; 然后点击new按钮你会看到&lt;注意你的公共哭的名称要填写格式为XXX.github.io其中XXX是你的用户名 未完待续。。。","tags":[{"name":"github","slug":"github","permalink":"http://liyuanqing.top/tags/github/"},{"name":"博客","slug":"博客","permalink":"http://liyuanqing.top/tags/博客/"},{"name":"hexo","slug":"hexo","permalink":"http://liyuanqing.top/tags/hexo/"}]},{"title":"Hello World","date":"2017-02-09T06:11:39.448Z","path":"2017/02/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]