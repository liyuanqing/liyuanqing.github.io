[{"title":"js实现jq的ajax","date":"2017-02-13T10:22:43.000Z","path":"2017/02/13/js实现jq的ajax/","text":"本文将介绍如何使用js封装一段代码，实现jq的ajax功能，每一步代码均有注释便于理解 实现代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556function ajax()&#123; //获取ajax的相应值（请求类型，请求地址，同步或异步，传递数据，接收数据类型，成功失败函数等） var ajaxData = &#123; type:arguments[0].type || \"GET\", url:arguments[0].url || \"\", async:arguments[0].async || \"true\", data:arguments[0].data || null, dataType:arguments[0].dataType || \"text\", contentType:arguments[0].contentType || \"application/x-www-form-urlencoded\", beforeSend:arguments[0].beforeSend || function()&#123;&#125;, success:arguments[0].success || function()&#123;&#125;, error:arguments[0].error || function()&#123;&#125; &#125; ajaxData.beforeSend() var xhr = createxmlHttpRequest(); //创建 XMLHttpRequest 对象 xhr.responseType=ajaxData.dataType; //预期服务器返回的数据类型 xhr.open(ajaxData.type,ajaxData.url,ajaxData.async); //规定请求的类型、URL 以及是否异步处理请求 xhr.setRequestHeader(\"Content-Type\",ajaxData.contentType); //发送信息至服务器时内容编码类型(向请求添加 HTTP 头) xhr.send(convertData(ajaxData.data)); //将请求发送到服务器 //当请求被发送到服务器时，我们需要执行一些基于响应的任务。 //每当 readyState 改变时，就会触发 onreadystatechange 事件。 //readyState 属性存有 XMLHttpRequest 的状态信息。 xhr.onreadystatechange = function() &#123; if (xhr.readyState == 4) &#123; if(xhr.status == 200)&#123; ajaxData.success(xhr.response) &#125;else&#123; ajaxData.error() &#125; &#125; &#125;&#125;//创建 XMLHttpRequest 对象function createxmlHttpRequest() &#123; if (window.ActiveXObject) &#123; // IE6, IE5 浏览器执行代码 return new ActiveXObject(\"Microsoft.XMLHTTP\"); &#125; else if (window.XMLHttpRequest) &#123; // IE7+, Firefox, Chrome, Opera, Safari 浏览器执行代码 return new XMLHttpRequest(); &#125;&#125;//解析传入的对象function convertData(data)&#123; if( typeof data === 'object' )&#123; var convertResult = \"\" ; for(var c in data)&#123; convertResult+= c + \"=\" + data[c] + \"&amp;\"; &#125; convertResult=convertResult.substring(0,convertResult.length-1) return convertResult; &#125;else&#123; return data; &#125;&#125; 调用方法ajax({ type:\"POST\", url:\"ajax.php\", dataType:\"json\", data:{\"val1\":\"abc\",\"val2\":123,\"val3\":\"456\"}, beforeSend:function(){ //some js code }, success:function(msg){ console.log(msg) }, error:function(){ console.log(\"error\") } })","tags":[{"name":"js jq ajax","slug":"js-jq-ajax","permalink":"http://liyuanqing.top/tags/js-jq-ajax/"}]},{"title":"测试博客","date":"2017-02-09T10:37:47.000Z","path":"2017/02/09/测试博客/","text":"测试标题一 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试 这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试这是测试测试","tags":[{"name":"测试","slug":"测试","permalink":"http://liyuanqing.top/tags/测试/"}]},{"title":"Hello World","date":"2017-02-09T06:11:39.448Z","path":"2017/02/09/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]}]